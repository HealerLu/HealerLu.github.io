<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://HealerLu.github.io</id>
    <title>Healer</title>
    <updated>2020-08-21T05:24:34.717Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://HealerLu.github.io"/>
    <link rel="self" href="https://HealerLu.github.io/atom.xml"/>
    <subtitle>&lt;strong&gt; 岁月不堪数，故人不如初&lt;/strong&gt;</subtitle>
    <logo>https://HealerLu.github.io/images/avatar.png</logo>
    <icon>https://HealerLu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Healer</rights>
    <entry>
        <title type="html"><![CDATA[数组和方法]]></title>
        <id>https://HealerLu.github.io/post/lP1sW6h3n/</id>
        <link href="https://HealerLu.github.io/post/lP1sW6h3n/">
        </link>
        <updated>2020-08-21T05:22:44.000Z</updated>
        <content type="html"><![CDATA[<h4 id="数组概述">数组概述</h4>
<ul>
<li>数组（array）是一种用于存储多个相同类型数据的存储模型</li>
</ul>
<h4 id="数组的定义格式">数组的定义格式</h4>
<ul>
<li>
<p>格式一：</p>
<ul>
<li>
<p>数据类型[] 变量名</p>
<blockquote>
<p>int[] arr</p>
<p>定义了一个int类型的数组，数组名是arr</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>格式二：</p>
<ul>
<li>
<p>数据类型 变量名[]</p>
<blockquote>
<p>int arr[]</p>
<p>定义了一个int类型的变量，变量名是arr数组</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="数组初始化">数组初始化</h4>
<ul>
<li>
<p>数组初始化概述</p>
<ul>
<li>Java中的数组必须先初始化，然后才能使用</li>
<li>所谓初始化就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</li>
</ul>
</li>
<li>
<p>数组初始化方式</p>
<ul>
<li>动态初始化</li>
<li>静态初始化</li>
</ul>
</li>
<li>
<p>动态初始化</p>
<ul>
<li>
<p>概念</p>
<ul>
<li>初始化时只制定数组长度，由系统为数组分配初始值</li>
</ul>
</li>
<li>
<p>初始化格式</p>
<ul>
<li>
<p>数据类型[] 变量名 = new 数据类型[数组长度]</p>
</li>
<li>
<blockquote>
<p>int[] arr = new int[3]</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>数组元素访问</p>
<ul>
<li>数组变量访问方式
<ul>
<li>格式：数组名</li>
</ul>
</li>
<li>数组内部保存的数据的访问方式
<ul>
<li>格式：数组名[索引]</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>静态初始化</p>
<ul>
<li>
<p>概念</p>
<ul>
<li>初始化时指定每个数组元素的初始值，由系统决定数组长度</li>
</ul>
</li>
<li>
<p>格式</p>
<ul>
<li>
<p>数据类型[] 变量名 = new 数据类型[]{数据1， 数据2， 数据3，......}</p>
</li>
<li>
<blockquote>
<p>int[] arr = new int[]{1, 2, 3};</p>
</blockquote>
</li>
<li>
<p>简化格式：数据类型[] 变量名 = {数据1， 数据2， 数据3，......};</p>
</li>
<li>
<blockquote>
<p>int[] arr = {1, 2, 3};</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="方法">方法</h4>
<ul>
<li>
<p>概述</p>
<ul>
<li>
<p>方法(method)是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集。</p>
<blockquote>
<p>方法必须先创建才可以使用，该过程称为方法定义</p>
<p>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为方法调用</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>方法的定义</p>
<ul>
<li>
<p>格式</p>
<p><code>public static void 方法名(){</code></p>
<p>​	// 方法体</p>
<p><code>}</code></p>
</li>
</ul>
</li>
<li>
<p>方法的调用</p>
<ul>
<li>
<p>格式</p>
<p><code>方法名()</code></p>
</li>
</ul>
</li>
<li>
<p>带参数方法的定义</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://HealerLu.github.io/post-images/image-20200820174025554.png" alt="带参数方法的定义" loading="lazy"></figure>
<ul>
<li>
<p>带参数方法的调用</p>
<figure data-type="image" tabindex="2"><img src="https://HealerLu.github.io/post-images/image-20200820174141436.png" alt="带参数方法的调用" loading="lazy"></figure>
</li>
<li>
<p>带返回值方法的定义</p>
<figure data-type="image" tabindex="3"><img src="https://HealerLu.github.io/post-images/image-20200821095402058.png" alt="带返回值方法的定义" loading="lazy"></figure>
</li>
<li>
<p>带返回值方法的调用</p>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://HealerLu.github.io/post-images/image-20200821095435570.png" alt="带返回值方法的调用" loading="lazy"></figure>
<h4 id="方法重载">方法重载</h4>
<ul>
<li>
<p>概述</p>
<blockquote>
<p>方法重载是指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>
</blockquote>
<ul>
<li>多个方法都在同一个类中</li>
<li>多个方法具有相同的方法名</li>
<li>多个方法的参数不相同（类型不同或者数量不同）</li>
</ul>
</li>
<li>
<p>方法重载特点</p>
<ul>
<li>重载仅对应方法的定义，与方法的调用无关，调用方式参考标准格式</li>
<li>重载仅针对同哟个类中方法的名称与参数进行识别，与返回值无关。换句话说就是不能通过返回值来判定两个方法是否相互构成重载</li>
</ul>
</li>
</ul>
<h4 id="方法参数传递">方法参数传递</h4>
<ul>
<li>
<p>基本类型</p>
<blockquote>
<p>对于基本数据类型的参数，形参的改变，不影响实参的值</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://HealerLu.github.io/post-images/image-20200821103223726.png" alt="对于基本数据类型的参数，形参的改变，不影响实参的值" loading="lazy"></figure>
<blockquote>
<p>输出都为100</p>
</blockquote>
</li>
<li>
<p>引用类型</p>
<blockquote>
<p>对于引用类型的参数，形参的改变，影响实参的值</p>
</blockquote>
<figure data-type="image" tabindex="6"><img src="https://HealerLu.github.io/post-images/image-20200821103954981.png" alt="对于引用类型的参数，形参的改变，影响实参的值" loading="lazy"></figure>
<blockquote>
<p>第一次输出20，第二次输出200</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算术运算符和分支语句]]></title>
        <id>https://HealerLu.github.io/post/suan-zhu-yun-suan-fu-he-fen-zhi-yu-ju/</id>
        <link href="https://HealerLu.github.io/post/suan-zhu-yun-suan-fu-he-fen-zhi-yu-ju/">
        </link>
        <updated>2020-08-20T07:32:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="算术运算符">算术运算符</h3>
<h4 id="运算符和表达式">运算符和表达式</h4>
<ol>
<li>
<p>运算符</p>
<blockquote>
<p>对常量或者变量进行操作的符号</p>
</blockquote>
</li>
<li>
<p>表达式</p>
<blockquote>
<p>用运算符把常量或者变量连接起来符合Java语法的式子。不同运算符链接的表达式体现的是不同类型的表达式。</p>
</blockquote>
</li>
</ol>
<h4 id="算术运算符-2">算术运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">取余</td>
</tr>
</tbody>
</table>
<blockquote>
<p>整数相除只能得到整数，要想得到小数，必须有浮点数的参与</p>
</blockquote>
<h4 id="字符的操作">字符的“+”操作</h4>
<blockquote>
<p>是拿字符在计算机底层对应的数值来进行计算的</p>
<p>'A' ------&gt; 65         A-Z是连续的</p>
<p>'a' ------&gt; 97          a-z是连续的</p>
<p>'0' ------&gt; 48          0-9是连续的</p>
<p>算是表达式中包含多个基本数据类型的值的时候，整个算是表达式的类型会自动进行提升</p>
</blockquote>
<p><strong>提升规则</strong></p>
<ul>
<li>
<p>byte、short、char类型将被提升到int类型</p>
</li>
<li>
<p>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型</p>
<blockquote>
<p>等级顺序：btye,short,char ----&gt; int ----&gt; long ----&gt; float ----&gt; double</p>
</blockquote>
</li>
</ul>
<h4 id="字符串的操作">字符串的“+”操作</h4>
<ul>
<li>当 &quot;+&quot; 操作出现字符串时，&quot;+&quot;是字符串的连接，而不是算术运算。</li>
<li>当 &quot;+&quot;  操作中出现了字符串，就是连接运算符，否则就是算术运算。当连续进行 &quot;+&quot;  操作时，则为从左到右依次执行。</li>
</ul>
<h4 id="赋值运算符">赋值运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">赋值</td>
<td style="text-align:center">a = 10， 将10赋值给变量a</td>
</tr>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">加后赋值</td>
<td style="text-align:center">a += b，将 a + b 的值给a</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">减后赋值</td>
<td style="text-align:center">a -= b，将 a - b 的值给a</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">乘后赋值</td>
<td style="text-align:center">a *= b，将 a * b 的值给a</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">除后赋值</td>
<td style="text-align:center">a /= b，将 a / b 的商给a</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">取余后赋值</td>
<td style="text-align:center">a %= b，将 a / b 的余数给a</td>
</tr>
</tbody>
</table>
<blockquote>
<p>扩展的赋值运算符隐含了强制类型转换</p>
</blockquote>
<h4 id="自增自减运算符">自增自减运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:center">自增</td>
<td style="text-align:center">变量的值加1</td>
</tr>
<tr>
<td style="text-align:center">--</td>
<td style="text-align:center">自减</td>
<td style="text-align:center">变量的值减1</td>
</tr>
</tbody>
</table>
<ul>
<li>++ 和 -- 既可以放在变量的后面，也可以放在变量的前面</li>
<li>单独使用的时候， ++ 和 -- 无论是放在变量的前面或者是后边，结果都是一样的</li>
<li>参与操作的时候，如果放在变量的后面，则会先拿变量参与操作，后拿变量做 ++ 或者 --</li>
<li>参与操作的时候，如果放在变量的前面，则会先拿变量做 ++ 或者 --，后拿变量参与操作</li>
</ul>
<h4 id="关系运算符">关系运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">a == b，判断a和b的值是否相等，成立为true，不成立为false</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">a != b，判断a和b的值是否不相等，成立为true，不成立为false</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">a &gt; b，判断a是否大于b，成立为true，不成立为false</td>
</tr>
<tr>
<td style="text-align:center">&gt; =</td>
<td style="text-align:center">a &gt;= b，判断a是否大于等于b，成立为true，不成立为false</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">a &lt; b，判断a是否小于b，成立为true，不成立为false</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">a &lt;= b，判断a是否小于等于b，成立为true，不成立为false</td>
</tr>
</tbody>
</table>
<h4 id="逻辑运算符">逻辑运算符</h4>
<ul>
<li>描述
<ul>
<li>逻辑运算符是用来连接关系表达式的运算符</li>
<li>逻辑运算符也可以直接连接布尔类型的常量或者变量</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">逻辑与</td>
<td style="text-align:center">a &amp; b，a和b都是true，结果为true，否则为false</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">逻辑或</td>
<td style="text-align:center">a | b，a和b都是false，结果为false，否则为true</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">逻辑异或</td>
<td style="text-align:center">a ^ b，a和b结果不同为true，相同为false</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">逻辑非</td>
<td style="text-align:center">!a，和a的结果相反</td>
</tr>
</tbody>
</table>
<h4 id="短路逻辑运算符">短路逻辑运算符</h4>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">短路与</td>
<td style="text-align:center">作用和 &amp; 相同，但是有短路效果</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">短路或</td>
<td style="text-align:center">作用和 | 相同，但是有短路效果</td>
</tr>
</tbody>
</table>
<ul>
<li>逻辑与 &amp;，无论左边真假，右边都要执行</li>
<li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</li>
<li>逻辑或 |，无论左边真假，右边都要执行</li>
<li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</li>
</ul>
<h4 id="三元运算符">三元运算符</h4>
<ul>
<li>
<p>格式：关系表达式 ? 表达式1 : 表达式2；</p>
<blockquote>
<p>a &gt; b ? a : b</p>
</blockquote>
</li>
</ul>
<h3 id="分支语句">分支语句</h3>
<h4 id="流程控制语句">流程控制语句</h4>
<ul>
<li>分类
<ul>
<li>顺序结构</li>
<li>分支结构（if，switch）</li>
<li>循环结构（for，while， do...while）</li>
</ul>
</li>
</ul>
<h4 id="顺序结构">顺序结构</h4>
<ul>
<li>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构。按照代码的先后顺序依次执行，程序中大多数的代码都是这样执行的。</li>
</ul>
<h4 id="if语句">if语句</h4>
<ul>
<li>格式1</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://HealerLu.github.io/post-images/image-20200820113920642.png" alt="if语句格式" loading="lazy"></figure>
<ul>
<li>执行流程</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://HealerLu.github.io/post-images/image-20200820114211748.png" alt="执行流程" loading="lazy"></figure>
<ul>
<li>
<p>格式2</p>
<figure data-type="image" tabindex="3"><img src="https://HealerLu.github.io/post-images/image-20200820114332238.png" alt="if语句格式2" loading="lazy"></figure>
</li>
<li>
<p>执行流程</p>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://HealerLu.github.io/post-images/image-20200820130128452.png" alt="执行流程" loading="lazy"></figure>
<ul>
<li>
<p>格式3</p>
<figure data-type="image" tabindex="5"><img src="https://HealerLu.github.io/post-images/image-20200820130510602.png" alt="格式三" loading="lazy"></figure>
</li>
<li>
<p>执行流程</p>
</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://HealerLu.github.io/post-images/image-20200820130833146.png" alt="执行流程" loading="lazy"></figure>
<h4 id="switch语句">switch语句</h4>
<ul>
<li>
<p>格式</p>
<figure data-type="image" tabindex="7"><img src="https://HealerLu.github.io/post-images/image-20200820131531961.png" alt="switch" loading="lazy"></figure>
</li>
<li>
<p>流程</p>
<figure data-type="image" tabindex="8"><img src="https://HealerLu.github.io/post-images/image-20200820131619765.png" alt="流程" loading="lazy"></figure>
<blockquote>
<p>在switch与剧中，如果case控制的语句体后面不写break，将出现穿透现象；在不判断下一个case值得情况下，向下运行知道遇到break，或者整体switch语句结束。</p>
</blockquote>
</li>
</ul>
<h3 id="循环语句">循环语句</h3>
<ul>
<li>循环结构的组成
<ul>
<li>初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li>
<li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li>
<li>循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li>
<li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li>
</ul>
</li>
<li>循环结构对应的语法
<ul>
<li>初始化语句：这里可以是一条或者多条语句，这些语句可以完成一些初始化操作</li>
<li>循环体语句：这里条件判断语句：这里使用一个结果值为boolean类型的表达式，这个表达式能决定是否执行循环体。例如：a&lt;3 可以是任意语句，这些语句将反复执行</li>
<li>条件控制语句：这里通常是使用一条语句来改变变量的值，从而达到控制循环是否继续向下执行的效果。常见i++,i--这样的操作</li>
</ul>
</li>
</ul>
<h4 id="for循环语句">for循环语句</h4>
<figure data-type="image" tabindex="9"><img src="https://HealerLu.github.io/post-images/image-20200820134405907.png" alt="for循环" loading="lazy"></figure>
<h4 id="while循环语句">while循环语句</h4>
<figure data-type="image" tabindex="10"><img src="https://HealerLu.github.io/post-images/image-20200820143027037.png" alt="while循环语句" loading="lazy"></figure>
<h4 id="dowhile循环语句">do...while循环语句</h4>
<figure data-type="image" tabindex="11"><img src="https://HealerLu.github.io/post-images/image-20200820143526546.png" alt="do...while循环语句" loading="lazy"></figure>
<h4 id="三种循环的区别">三种循环的区别</h4>
<ul>
<li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li>
<li>do...while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li>
</ul>
<h4 id="for和while的区别">for和while的区别</h4>
<ul>
<li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li>
<li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li>
</ul>
<h4 id="条件控制语句">条件控制语句</h4>
<ul>
<li>概述
<ul>
<li>continue	用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行</li>
<li>break	用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java SE 基础]]></title>
        <id>https://HealerLu.github.io/post/java-se-ji-chu-jdk-de-an-zhuang/</id>
        <link href="https://HealerLu.github.io/post/java-se-ji-chu-jdk-de-an-zhuang/">
        </link>
        <updated>2020-08-19T05:15:13.000Z</updated>
        <content type="html"><![CDATA[<h4 id="jre-和-jdk">JRE 和 JDK</h4>
<ul>
<li>
<p><strong>JRE(Java Runtime Environment)</strong> 是Java程序的运行时环境，包含<strong>JVM</strong>和运行时所需要的核心类库</p>
<blockquote>
<p>我们想要运行一个已有的Java程序，那么只需要安装<strong>JRE</strong>即可</p>
</blockquote>
</li>
<li>
<p><strong>JDK（Java Development Kit ）<strong>是Java程序开发工具包，包含</strong>JVM</strong>和开发人员使用的工具</p>
<blockquote>
<p>其中的开发工具：编译工具（<strong>javac.exe</strong>）和运行工具（<strong>java.exe</strong>）</p>
</blockquote>
</li>
</ul>
<h4 id="jdk-jre和jvm的关系">JDK、JRE和JVM的关系</h4>
<figure data-type="image" tabindex="1"><img src="https://HealerLu.github.io/post-images/image-20200819105356024.png" alt="JDK、JRE和JVM的关系" loading="lazy"></figure>
<h4 id="jdk的安装目录说明">JDK的安装目录说明</h4>
<figure data-type="image" tabindex="2"><img src="https://HealerLu.github.io/post-images/image-20200819110627110.png" alt="JDK的安装目录说明" loading="lazy"></figure>
<h4 id="关键字">关键字</h4>
<ol>
<li>概述
<ul>
<li>关键字就是被Java语言赋予了特定含义的单词</li>
</ul>
</li>
<li>特点
<ul>
<li>关键字的字母全部小写</li>
<li>常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观</li>
</ul>
</li>
</ol>
<h4 id="常量">常量</h4>
<ol>
<li>
<p>概述</p>
<ul>
<li>在程序运行过程中，其值不可以发生改变的量</li>
</ul>
</li>
<li>
<p>分类</p>
<table>
<thead>
<tr>
<th style="text-align:center">常量类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字符串常量</td>
<td style="text-align:center">用双引号括起来的内容</td>
<td style="text-align:center">&quot;Hello word&quot;</td>
</tr>
<tr>
<td style="text-align:center">整数常量</td>
<td style="text-align:center">不带小数的数字</td>
<td style="text-align:center">100，-88</td>
</tr>
<tr>
<td style="text-align:center">小数常量</td>
<td style="text-align:center">带小数的数字</td>
<td style="text-align:center">13.14，-2.22</td>
</tr>
<tr>
<td style="text-align:center">字符常量</td>
<td style="text-align:center">用单引号括起来的内容</td>
<td style="text-align:center">'A'，'0'</td>
</tr>
<tr>
<td style="text-align:center">布尔常量</td>
<td style="text-align:center">布尔值，表示真假</td>
<td style="text-align:center">只有两个值：true，false</td>
</tr>
<tr>
<td style="text-align:center">空常量</td>
<td style="text-align:center">一个特殊的值，空值</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<p>`public class HelloWord {</p>
<pre><code>public static void main (String[] args) {
 // 字符串常量
     System.out.println(&quot;hello word&quot;);
     System.out.println(&quot;--------&quot;);
 // 整数常量
     System.out.println(60);
     System.out.println(&quot;--------&quot;);
 //小数常量
     System.out.println(13.14);
     System.out.println(&quot;--------&quot;);
 // 字符常量
     System.out.println('A');
     System.out.println(&quot;--------&quot;);
 // 布尔常量
     System.out.println(true);
     System.out.println(&quot;--------&quot;);
 // 空常量
 // 空常量是不能直接输出的
     System.out.println(null);
}
</code></pre>
<p>}`</p>
</li>
</ol>
<h4 id="数据类型">数据类型</h4>
<ol>
<li>
<p>计算机存储单元</p>
<ul>
<li>
<p>无论是内存还是硬盘，计算机存储设备的最小信息单元叫<strong>位（bit）</strong>，我们又称之为<strong>比特位</strong>，通常用小写字母<strong>b</strong>表示。而计算机中最小的存储单元叫<strong>字节（byte）</strong>，通常用大写字母<strong>B</strong>表示，字节是由连续的8个位组成</p>
<blockquote>
<p>1B（字节） = 8bit</p>
<p>1KB = 1024B</p>
<p>1MB = 1024KB</p>
<p>1GB = 1024MB</p>
<p>1TB = 1024GB</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>数据类型</p>
<ul>
<li>Java语言是强类型语言，对于每一种数据都给出了明确的数据类型。不同的数据类型也分配了不同的内存空间，所以他们标识的数据大小也是不一样的。</li>
<li>数据类型的分类</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://HealerLu.github.io/post-images/image-20200819135847353.png" alt="数据类型" loading="lazy"></figure>
</li>
<li>
<p>数据类型内存占用和取值范围</p>
<figure data-type="image" tabindex="4"><img src="https://HealerLu.github.io/post-images/image-20200819140413077.png" alt="数据类型内存占用和取值范围" loading="lazy"></figure>
</li>
</ol>
<h4 id="变量">变量</h4>
<ol>
<li>
<p>变量概述</p>
<ul>
<li>在程序运行过程中，其值可以发生改变的量</li>
</ul>
</li>
<li>
<p>变量的定义</p>
<ul>
<li>
<p>格式： 数据类型 变量名 = 变量值；</p>
<blockquote>
<p><code>int a = 10;</code></p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>变量的使用</p>
<ul>
<li>
<p>取值</p>
<ul>
<li>
<p>取值格式：变量名</p>
<blockquote>
<p><code>a</code></p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>修改值</p>
<ul>
<li>
<p>修改值格式： 变量名 = 变量值;</p>
<blockquote>
<p><code>a = 20</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><code>public class HelloWord { public static void main (String[] args) { 		// 定义变量 		int a = 10; 		// 输出变量 		System.out.println(a); 		// 修改值 		a = 20; 		// 输出变量 		System.out.println(a); } }</code></p>
</li>
<li>
<p>声明变量的注意事项</p>
<ul>
<li>变量名字不能重复</li>
<li>变量未赋值不能使用</li>
<li><strong>long类型的变量名义的时候，为了防止整数过大，后面要加L</strong></li>
<li><strong>float类型的变量定义的时候为了防止类型不兼容，后面要加F</strong></li>
</ul>
</li>
</ol>
<h4 id="标识符">标识符</h4>
<ol>
<li>标识符概述
<ul>
<li>标识符就是给类、方法、变量等起名字的符号</li>
</ul>
</li>
<li>标识符的定义规则
<ul>
<li>由**数字、字母、下划线（_）和美元符（$）**组成</li>
<li>不能以数字开头</li>
<li>不能是关键字</li>
<li>区分大小写</li>
</ul>
</li>
<li>常见命名约定
<ul>
<li>小驼峰命名法：方法、变量
<ul>
<li>标识符是一个单词的时候，首字母小写</li>
<li>标识符由多个字母组成的时候，第一个单词字母小写，其余单词首字母大写</li>
</ul>
</li>
<li>大驼峰命名法：类
<ul>
<li>标识符是一个单词的时候，首字母大写</li>
<li>标识符由多个字母组成的时候每个单词首字母大写</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="类型转换">类型转换</h4>
<ol>
<li>
<p>类型转换分类</p>
<ul>
<li>
<p>自动类型转换</p>
<blockquote>
<p>把一个表示数据范围小地数值或者变量赋值给另一个表示数据范围大的变量</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://HealerLu.github.io/post-images/image-20200819143801886.png" alt="数据范围从小到大图" loading="lazy"></figure>
<blockquote>
<p><code>double d = 10</code></p>
</blockquote>
</li>
<li>
<p>强制类型转换（不建议使用）</p>
<blockquote>
<p>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</p>
</blockquote>
<blockquote>
<p>格式： 目标数据类型 变量名 = （目标数据类型）值或者变量;</p>
<p><code>int k = (int)88.88 ==&gt; k为88</code></p>
</blockquote>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac终端如何使用代理]]></title>
        <id>https://HealerLu.github.io/post/mac-zhong-duan-ru-he-shi-yong-dai-li/</id>
        <link href="https://HealerLu.github.io/post/mac-zhong-duan-ru-he-shi-yong-dai-li/">
        </link>
        <updated>2020-08-17T02:05:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="在mac上安装使用shadowsocksx-ng-r8">在Mac上安装使用ShadowsocksX-NG-R8</h3>
<ol>
<li>
<p><a href="https://HealerLu.github.io/post-images/ShadowsocksX-NG-R8.dmg">点击下载ShadowsocksX-NG-R8.dmg</a></p>
</li>
<li>
<p>点击应用图标 ---&gt; HTTP代理设置 --&gt; 即可查看到监听的IP和端口号（一般为127.0.0.1:1087）</p>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://HealerLu.github.io/post-images/1597629976115.png" alt="HTTP代理设置" loading="lazy"></figure>
<h3 id="使用iterm2终端设置代理">使用iterm2终端设置代理</h3>
<ol>
<li>
<p>打开终端输入<code>vim ~/.zshrc</code>进入vim</p>
</li>
<li>
<p>输入 `i进入编辑模式</p>
</li>
<li>
<p>输入以下命令设置终端代理</p>
</li>
</ol>
<p><code>alias goproxy='export http_proxy=http://127.0.0.1:1087 https_proxy=http://127.0.0.1:1087'</code><br>
<code>alias disproxy='unset http_proxy https_proxy'</code></p>
<p><em>注：alias为设置别名</em></p>
<ol start="4">
<li>
<p>按下<code>esc</code>退出编辑模式，再按下<code>:wq</code>退出vim并保存</p>
</li>
<li>
<p>使用<code>source ~/.zshrc</code>命令更新刚才编辑的内容</p>
</li>
<li>
<p>直接在命令行运行<code>goproxy</code>即可启动终端代理</p>
</li>
<li>
<p>运行<code>crul cip.cc</code>，输出的内容为代理服务器的IP时，即为设置成功，如下所示</p>
<p>`IP	: 128.22.126.241<br>
地址	: 日本  大阪府  大阪<br>
运营商	: k-opti.com</p>
<p>数据二	: 日本 | 大阪K Opti通讯</p>
<p>数据三	:</p>
<p>URL	: http://www.cip.cc/128.22.126.241`</p>
</li>
<li>
<p>如果想关闭代理，运行<code>disproxy</code>即可</p>
</li>
</ol>
]]></content>
    </entry>
</feed>